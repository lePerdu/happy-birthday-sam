{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/ConffetiAnimation.svelte","../../src/guess.ts","../../src/LetterTile.svelte","../../src/GuessRow.svelte","../../src/CheckedGuessRow.svelte","../../src/EmptyGuessRow.svelte","../../src/GameBoard.svelte","../../src/guess-summary.ts","../../src/Keyboard.svelte","../../src/Modal.svelte","../../node_modules/svelte/store/index.mjs","../../src/validate.ts","../../src/store.ts","../../src/game-state.ts","../../src/App.svelte","../../src/keyboard.ts","../../src/main.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { stylesheet } = info;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            info.rules = {};\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true && boolean_attributes.has(name) ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${style_object[key]};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.46.4' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","<script lang=\"ts\">\n  /**\n   * Simple, seeded RNG (since `Math.random()` cannot be seeded).\n   *\n   * Not a \"real\" RNG, but good enough for visual purposes.\n   */\n  const randomWithSeed =\n    (seed: number): (() => number) =>\n    () => {\n      const x = Math.sin(++seed) * 10000;\n      return x - Math.floor(x);\n    };\n\n  type ConfettiContext = {\n    index: number;\n    total: number;\n    windowWidth: number;\n    windowHight: number;\n  };\n\n  /**\n   * Density of confetti objects in objects per pixel of page width.\n   */\n  const density: number = 1 / 20;\n\n  // Use ceil() over floor() since more confetti is always better\n  const confettiCount = Math.ceil(window.innerWidth * density);\n\n  const releaseDuration = 4;\n\n  // TODO Config these in CSS?\n  // Would probably have to do calculations in CSS as well in that case\n  const baseAcceleration = 200;\n\n  const positionVariance = 0.3;\n  const accelerationVariance = 0.1;\n  const scaleDownVariance = -0.5;\n  const scaleUpVariance = 3;\n\n  function calcConfettiParameters({\n    index,\n    total,\n    windowHight,\n  }: ConfettiContext): string {\n    const random = randomWithSeed(total * index);\n\n    const position =\n      (index + 0.5 + (2 * random() - 1) * positionVariance) / total;\n    const delay = releaseDuration * random();\n\n    const acceleration =\n      baseAcceleration * (1 + accelerationVariance * random());\n    const duration = Math.sqrt((2 * windowHight) / acceleration);\n\n    const scale =\n      1 + random() * (scaleUpVariance - scaleDownVariance) + scaleDownVariance;\n\n    return `\n      --confetti-position: ${position * 100}%;\n      --confetti-delay: ${delay}s;\n      --confetti-duration: ${duration}s;\n      --confetti-scale: ${scale};\n    `;\n  }\n</script>\n\n<div class=\"confetti-container\">\n  {#each new Array(confettiCount).fill(null) as _, index}\n    <div\n      class=\"confetti\"\n      style={calcConfettiParameters({\n        index,\n        total: confettiCount,\n        windowHight: window.innerHeight,\n        windowWidth: window.innerWidth,\n      })}\n    />\n  {/each}\n</div>\n\n<style>\n  .confetti-container {\n    position: fixed;\n    height: 100%;\n    width: 100%;\n\n    /* Render above everything, but pass-through clicks */\n    z-index: var(--confetti-z-index);\n    pointer-events: none;\n  }\n\n  @keyframes confetti-float {\n    from {\n      top: 100%;\n    }\n    to {\n      top: 0;\n    }\n  }\n\n  .confetti {\n    animation: var(--confetti-duration) confetti-float ease-in\n      var(--confetti-delay);\n    position: absolute;\n    top: -100%;\n    left: var(--confetti-position);\n\n    transform: scale(var(--confetti-scale));\n\n    /* width: 8px;\n    height: 6px;\n    background-color: red; */\n  }\n\n  .confetti::after {\n    content: \"❤️\";\n    color: red;\n  }\n</style>\n","const correctnessPriority = [\"notInWord\", \"inWord\", \"correct\"];\nexport function comparePriority(c1, c2) {\n    let c1Index = correctnessPriority.indexOf(c1);\n    let c2Index = correctnessPriority.indexOf(c2);\n    return c2Index - c1Index;\n}\nexport function compareGuessLetters(guess, target) {\n    if (guess.length !== target.length) {\n        throw new Error(\"Guess and target must have same length\");\n    }\n    const wordLength = guess.length;\n    // Start with all notInWord\n    let result = new Array(wordLength).fill(\"notInWord\");\n    // First pass to find correct letters\n    for (let i = 0; i < wordLength; i++) {\n        if (guess[i] === target[i]) {\n            result[i] = \"correct\";\n        }\n    }\n    // Second pass to find incorrect positions, excluding letters in the target\n    // which have already been mapped to letters in the guess\n    for (let targetIndex = 0; targetIndex < wordLength; targetIndex++) {\n        if (result[targetIndex] !== \"correct\") {\n            // Look for and mark first matching letter in the guess that hasn't\n            // already been marked\n            for (let resultIndex = 0; resultIndex < result.length; resultIndex++) {\n                if (result[resultIndex] === \"notInWord\" &&\n                    guess[resultIndex] === target[targetIndex]) {\n                    result[resultIndex] = \"inWord\";\n                    break;\n                }\n            }\n        }\n    }\n    return result;\n}\nexport function checkGuess(guess, target) {\n    return compareGuessLetters(guess, target).map((correctness, index) => ({\n        correctness,\n        letter: guess[index],\n    }));\n}\n","<script lang=\"ts\">\n  import { createEventDispatcher } from \"svelte\";\n  import { Correctness } from \"./guess\";\n\n  export let correctness: Correctness | undefined = undefined;\n  export let index: number = 0;\n\n  const dispatch = createEventDispatcher<{ revealed: never }>();\n\n  const correctnessClasses: Record<Correctness, string> = {\n    correct: \"correct\",\n    inWord: \"in-word\",\n    notInWord: \"not-in-word\",\n  };\n\n  const correctnessClass = correctness ? correctnessClasses[correctness] : \"\";\n\n  let element: HTMLElement | undefined;\n  $: {\n    if (element) {\n      const animations = element.getAnimations();\n      if (animations.length > 0) {\n        // TODO Consider all animations\n        const firstAnimation = animations[0];\n        firstAnimation.addEventListener(\"finish\", () => dispatch(\"revealed\"));\n        // TODO Do we need to the event listener, or will everything garbage\n        // collect by itself?\n      }\n    }\n  }\n</script>\n\n<div\n  bind:this={element}\n  class={`letter-tile ${correctnessClass}`}\n  style={`--letter-tile-index: ${index}`}\n>\n  <slot />\n</div>\n\n<style>\n  .letter-tile {\n    width: 4rem;\n    height: 4rem;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    border: 1px solid var(--border-color);\n\n    color: var(--letter-unknown-text);\n    background-color: var(--letter-unknown);\n\n    /* 0-based index of the tile, used for staggering reveal animations */\n    --letter-tile-index: 0;\n  }\n\n  @keyframes flip-y {\n    50% {\n      transform: rotateX(90deg);\n    }\n  }\n\n  @keyframes reveal-color {\n    to {\n      color: var(--letter-revealed-text);\n      background-color: var(--letter-revealed-color);\n    }\n  }\n\n  .correct {\n    --letter-revealed-color: var(--letter-correct-color);\n  }\n\n  .in-word {\n    --letter-revealed-color: var(--letter-in-word-color);\n  }\n\n  .not-in-word {\n    --letter-revealed-color: var(--letter-not-in-word-color);\n  }\n\n  .correct,\n  .in-word,\n  .not-in-word {\n    animation-delay: calc(var(--letter-tile-index) * var(--reveal-stagger));\n    animation-duration: var(--reveal-duration);\n    animation-name: flip-y, reveal-color;\n    animation-timing-function: linear, steps(2, jump-none);\n    animation-fill-mode: forwards;\n  }\n</style>\n","<div class=\"guess-row\">\n  <slot />\n</div>\n\n<style>\n  .guess-row {\n    display: flex;\n    margin-bottom: var(--letter-spacing);\n  }\n\n  .guess-row > :global(:not(:first-child)) {\n    margin-left: var(--letter-spacing);\n  }\n</style>\n","<script lang=\"ts\">\n  import { createEventDispatcher } from \"svelte\";\n  import LetterTile from \"./LetterTile.svelte\";\n  import { CheckedGuess } from \"./guess\";\n  import GuessRow from \"./GuessRow.svelte\";\n\n  export let guess: CheckedGuess;\n\n  const dispatch = createEventDispatcher<{ revealed: never }>();\n\n  let revealedTiles = 0;\n\n  function handleTileRevealed() {\n    // Dispatch revealed event when all tiles have been revealed\n    // TODO Reset revealedTiles on certain conditions\n    if (++revealedTiles === guess.length) {\n      revealedTiles = 0;\n      dispatch(\"revealed\");\n    }\n  }\n</script>\n\n<GuessRow>\n  {#each guess as g, index}\n    <LetterTile\n      correctness={g.correctness}\n      {index}\n      on:revealed={handleTileRevealed}\n    >\n      {g.letter}\n    </LetterTile>\n  {/each}\n</GuessRow>\n","<script lang=\"ts\">\n  import GuessRow from \"./GuessRow.svelte\";\n  import LetterTile from \"./LetterTile.svelte\";\n\n  export let wordLength: number;\n</script>\n\n<GuessRow>\n  {#each new Array(wordLength).fill(null) as _}\n    <LetterTile />\n  {/each}\n</GuessRow>\n","<script lang=\"ts\">\n  import { createEventDispatcher } from \"svelte\";\n\n  import CheckedGuessRow from \"./CheckedGuessRow.svelte\";\n  import EmptyGuessRow from \"./EmptyGuessRow.svelte\";\n  import { CheckedGuess } from \"./guess\";\n  import GuessRow from \"./GuessRow.svelte\";\n  import LetterTile from \"./LetterTile.svelte\";\n\n  export let wordLength: number;\n  export let currentGuess: string = \"\";\n  export let pastGuesses: CheckedGuess[] = [];\n  export let maxGuesses: number;\n  export let gameActive: boolean;\n\n  const dispatch = createEventDispatcher<{ reveled: CheckedGuess }>();\n\n  let remainingGuesses: number;\n  $: {\n    const baseRemainingGuesses = maxGuesses - pastGuesses.length;\n    // Remove a remaining guess if the game is active, since there is also a\n    // current guess in that case\n    remainingGuesses = Math.max(baseRemainingGuesses - (gameActive ? 1 : 0), 0);\n  }\n\n  // Blank strings to fill the rest of the tiles in the current row with\n  let currentGuessLetters: string[];\n  $: {\n    const currentGuessRemainingLetters = wordLength - currentGuess.length;\n    currentGuessLetters = currentGuess\n      .split(\"\")\n      .concat(new Array(currentGuessRemainingLetters).fill(\"\"));\n  }\n\n  /**\n   * Only fire the event when the most recent guess is revealed.\n   */\n  function handleGuessRevealed(guess: CheckedGuess) {\n    if (guess === pastGuesses[pastGuesses.length - 1]) {\n      dispatch(\"reveled\", guess);\n    }\n  }\n</script>\n\n<div class=\"game-board\">\n  {#each pastGuesses as guess}\n    <CheckedGuessRow {guess} on:revealed={() => handleGuessRevealed(guess)} />\n  {/each}\n\n  <!-- Don't show the current guess if over -->\n  {#if gameActive}\n    <GuessRow>\n      {#each currentGuessLetters as letter, index}\n        <LetterTile {index}>\n          {letter}\n        </LetterTile>\n      {/each}\n    </GuessRow>\n  {/if}\n\n  {#each new Array(remainingGuesses).fill(null) as _}\n    <EmptyGuessRow {wordLength} />\n  {/each}\n</div>\n\n<style>\n  .game-board {\n    display: block;\n\n    font-family: var(--game-font-family);\n    font-size: 2rem;\n    font-weight: bolder;\n    text-transform: uppercase;\n  }\n</style>\n","/**\n * Utilities for creating a guess summary for sharing externally.\n *\n * @module\n */\nimport \"./guess\";\nconst GAME_NAME = \"Samdle ❤\";\nconst correctnessTypeSymbols = {\n    correct: \"🟩\",\n    inWord: \"🟨\",\n    notInWord: \"⬛\",\n};\nexport default function generateGuessSummary(guesses, maxGuesses, dayNumber, solved) {\n    const score = `${solved ? guesses.length : \"X\"}/${maxGuesses}`;\n    const guessSummary = guesses\n        .map((letters) => letters\n        .map(({ correctness }) => correctnessTypeSymbols[correctness])\n        .join(\"\"))\n        .join(\"\\n\");\n    // dayNumber + 1 to index from 1\n    return `${GAME_NAME} ${dayNumber + 1} ${score}` + \"\\n\" + guessSummary;\n}\n","<script lang=\"ts\">\n  import { Correctness } from \"./guess\";\n\n  import { KeyUsageInfo } from \"./keyboard\";\n\n  import keyboardLayout from \"./keyboard-layout.json\";\n\n  export let keyUsageInfo: KeyUsageInfo = {};\n\n  const correctnessClasses: Record<Correctness, string> = {\n    correct: \"correct\",\n    inWord: \"in-word\",\n    notInWord: \"not-in-word\",\n  };\n\n  const specialKeys = {\n    Enter: \"ENTER\",\n    Backspace: \"DEL\",\n  };\n\n  const isSpecialKey = (key: string): boolean => key in specialKeys;\n\n  const resolveKey = (key: string): string =>\n    isSpecialKey(key) ? specialKeys[key] : key;\n\n  const getClickHandler = (key: string) => () => {\n    window.dispatchEvent(new KeyboardEvent(\"keydown\", { key }));\n  };\n</script>\n\n<div class=\"keyboard\">\n  {#each keyboardLayout as row}\n    <div class=\"keyboard-row\">\n      {#each row as key}\n        {#if key === null}\n          <div class=\"spacer\" />\n        {:else}\n          <button\n            class={`key ${correctnessClasses[keyUsageInfo[key]]}`}\n            class:special={isSpecialKey(key)}\n            on:click={getClickHandler(key)}\n          >\n            {resolveKey(key)}\n          </button>\n        {/if}\n      {/each}\n    </div>\n  {/each}\n</div>\n\n<style>\n  .keyboard {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    align-items: stretch;\n\n    max-width: var(--keyboard-max-width);\n  }\n\n  .keyboard-row {\n    display: flex;\n\n    margin-bottom: var(--keyboard-key-spacing);\n  }\n\n  button.key {\n    flex: 1;\n    height: var(--keyboard-key-height);\n\n    cursor: pointer;\n    user-select: none;\n\n    background: var(--keyboard-key-background);\n    margin-bottom: 0; /* Undo button styling */\n    box-shadow: none;\n    outline: none;\n    border-width: 0px;\n    border-radius: var(--border-radius);\n    padding: 0;\n\n    font-family: var(--game-font-family);\n    font-size: var(--keyboard-font-size);\n    font-weight: bolder;\n    color: var(--keyboard-key-text);\n  }\n\n  .key:not(:last-child) {\n    margin-right: var(--keyboard-key-spacing);\n  }\n\n  .key.special {\n    flex: 1.5;\n  }\n\n  .spacer {\n    flex: 0.5;\n  }\n\n  .spacer:last-child {\n    /* Remove margin from previous item to fix alignment */\n    margin-left: calc(-1 * var(--keyboard-key-spacing));\n  }\n\n  .key.correct {\n    background: var(--letter-correct-color);\n  }\n\n  .key.in-word {\n    background: var(--letter-in-word-color);\n  }\n\n  .key.not-in-word {\n    background: var(--letter-not-in-word-color);\n  }\n</style>\n","<script lang=\"ts\">\n  import { createEventDispatcher } from \"svelte\";\n\n  const dispatch = createEventDispatcher<{ close: never }>();\n\n  function handleClose() {\n    dispatch(\"close\");\n  }\n\n  function handleKeydown(event: KeyboardEvent) {\n    if (event.key === \"Escape\") {\n      handleClose();\n    }\n  }\n</script>\n\n<svelte:window on:keydown={handleKeydown} />\n\n<div class=\"modal-container\">\n  <div class=\"modal-backdrop\" on:click={handleClose} />\n  <div class=\"modal\" role=\"alert\" aria-modal=\"true\">\n    <button class=\"close-button\" on:click={handleClose}>&#x2715;</button>\n    <slot />\n  </div>\n</div>\n\n<style>\n  .modal-container {\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    z-index: var(--modal-z-index);\n  }\n\n  .modal-backdrop {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n\n    background-color: var(--background);\n    opacity: var(--modal-backdrop-opacity);\n  }\n\n  .modal {\n    position: relative;\n    flex: 0 1 var(--modal-max-width);\n\n    margin: var(--modal-margin);\n    padding: var(--modal-padding);\n    font-size: 1.5rem;\n    text-align: center;\n\n    background-color: var(--modal-background);\n    border-radius: var(--border-radius);\n    box-shadow: var(--box-shadow);\n  }\n\n  .close-button {\n    position: absolute;\n    top: var(--modal-close-button-inset);\n    right: var(--modal-close-button-inset);\n\n    margin: 0;\n    padding: 0;\n\n    border: none;\n    background: transparent;\n\n    font-size: 1.5rem;\n    cursor: pointer;\n  }\n</style>\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","/**\n * Simple schema validation system.\n * @module\n */\nexport function string(config = {}) {\n    return (s) => typeof s === \"string\" &&\n        (config.minLength === undefined || s.length >= config.minLength) &&\n        (config.maxLength === undefined || s.length <= config.maxLength);\n}\nexport function number(config = {}) {\n    return (n) => typeof n === \"number\" && (!config.integer || n === Math.floor(n));\n}\nexport function array(itemValidator) {\n    return (a) => Array.isArray(a) && a.every(itemValidator);\n}\nexport function object(shape) {\n    return (o) => Object.entries(shape).every(([key, validator]) => validator(o[key]));\n}\nexport function oneOf(items) {\n    return (e) => items.includes(e);\n}\n","import { makeGameStateStore, makePlayStateStore, } from \"./game-state\";\nimport solutions from \"./solutions.json\";\nimport * as validate from \"./validate\";\nconst MS_PER_DAY = 1000 * 3600 * 24;\nfunction calcDayNumber() {\n    const solutionStartDate = new Date(solutions.startDate).getTime();\n    const today = new Date();\n    // Today's date in UTC\n    const todayUtc = Date.UTC(today.getFullYear(), today.getMonth(), today.getDate());\n    const dateDelta = todayUtc - solutionStartDate;\n    // Convert ms to days and wrap the index to keep in the list\n    return Math.floor(dateDelta / MS_PER_DAY);\n}\n// Determine the solution config for the current day. This can be considered\n// global state, as it should only change on page refresh.\n// Constructs date at UTC\nconst dayNumber = calcDayNumber();\nconst solutionIndex = dayNumber % solutions.solutions.length;\nconst currentSolution = solutions.solutions[solutionIndex];\nexport const config = {\n    maxGuesses: 6,\n    dayNumber: dayNumber,\n    solution: currentSolution,\n};\nconst GAME_STATE_KEY = \"samdle-game-state\";\n// Validators for making sure the data in localStorage is in the expected format\nconst gameConfigValidator = validate.object({\n    maxGuesses: validate.number({ integer: true }),\n    dayNumber: validate.number({ integer: true }),\n    solution: validate.object({\n        word: validate.string(),\n        message: validate.array(validate.string()),\n    }),\n});\nconst gameStateValidator = validate.object({\n    config: gameConfigValidator,\n    guesses: validate.array(validate.array(validate.object({\n        correctness: validate.oneOf([\"correct\", \"inWord\", \"notInWord\"]),\n        letter: validate.string({ minLength: 1, maxLength: 1 }),\n    }))),\n});\nfunction retrieveGameState() {\n    try {\n        const state = JSON.parse(localStorage.getItem(GAME_STATE_KEY));\n        if (gameStateValidator(state)) {\n            return state;\n        }\n        else {\n            console.log(\"Ignoring invalid/old game state\", state);\n        }\n    }\n    catch (e) {\n        return undefined;\n    }\n}\nfunction storeGameState(state) {\n    localStorage.setItem(GAME_STATE_KEY, JSON.stringify(state));\n}\nexport const gameState = makeGameStateStore(config, (set) => {\n    const oldState = retrieveGameState();\n    if (oldState && oldState.config.dayNumber === dayNumber) {\n        // Only replace with stored state if it's the same day\n        set(oldState);\n    }\n});\n// Keep in sync with localStorage\ngameState.subscribe(storeGameState);\nexport const playState = makePlayStateStore(config, gameState);\n","import { derived, writable } from \"svelte/store\";\nimport { checkGuess } from \"./guess\";\nconst checkedGuessString = (guess) => guess.map((l) => l.letter).join(\"\");\nfunction derivePlayState(config, state) {\n    if (state.guesses.some((g) => checkedGuessString(g) === config.solution.word)) {\n        return \"won\";\n    }\n    else if (state.guesses.length >= config.maxGuesses) {\n        return \"lost\";\n    }\n    else {\n        return \"playing\";\n    }\n}\nexport function makeGameStateStore(config, start) {\n    const { subscribe, update } = writable({\n        config,\n        guesses: [],\n    }, start);\n    return {\n        subscribe,\n        submitGuess(guess) {\n            update((state) => (Object.assign(Object.assign({}, state), { guesses: [...state.guesses, checkGuess(guess, config.solution.word)] })));\n        },\n    };\n}\nexport function makePlayStateStore(config, gameStore) {\n    return derived(gameStore, ($gameStore) => derivePlayState(config, $gameStore));\n}\n","<script lang=\"ts\">\n  import ConffetiAnimation from \"./ConffetiAnimation.svelte\";\n  import GameBoard from \"./GameBoard.svelte\";\n  import generateGuessSummary from \"./guess-summary\";\n  import { getKeyUsage } from \"./keyboard\";\n  import Keyboard from \"./Keyboard.svelte\";\n  import Modal from \"./Modal.svelte\";\n  import { gameState, playState } from \"./store\";\n  import wordlist from \"./wordlist.json\";\n\n  $: wordLength = $gameState.config.solution.word.length;\n  $: solution = $gameState.config.solution;\n\n  let currentGuess = \"\";\n\n  $: keyUsageInfo = getKeyUsage($gameState.guesses);\n\n  let showModal = false;\n\n  function handleFinish() {\n    showModal = true;\n  }\n\n  function validateGuess() {\n    if (currentGuess.length !== wordLength) {\n      console.log(\"Not enough letters\");\n      return false;\n    }\n\n    if (!wordlist.includes(currentGuess)) {\n      console.log(\"Not a real word\");\n      return false;\n    }\n\n    return true;\n  }\n\n  function handleSubmitGuess() {\n    if (!validateGuess()) {\n      return;\n    }\n\n    gameState.submitGuess(currentGuess);\n    currentGuess = \"\";\n  }\n\n  /**\n   * Keydown handler for handling non-printable keys.\n   */\n  function handleKeydown(event: KeyboardEvent) {\n    if ($playState !== \"playing\") {\n      return;\n    }\n\n    if (event.ctrlKey || event.altKey || event.metaKey) {\n      // Ignore modified keys\n      return;\n    }\n    switch (event.key) {\n      case \"Enter\":\n        // Prevent from triggering last pressed button\n        event.preventDefault();\n\n        handleSubmitGuess();\n        break;\n      case \"Backspace\":\n        currentGuess = currentGuess.slice(0, currentGuess.length - 1);\n        break;\n      case \"Delete\":\n        currentGuess = \"\";\n        break;\n      default:\n        // Append letters to the current guess\n        if (/^[a-z]$/i.test(event.key)) {\n          if (currentGuess.length < wordLength) {\n            currentGuess += event.key.toUpperCase();\n          } else {\n            console.log(\"No more letters\");\n          }\n        }\n    }\n  }\n\n  /**\n   * Show success/failure pop-ups when the last guess is reveled.\n   */\n  function handleGuessRevealed() {\n    switch ($playState) {\n      case \"won\":\n      case \"lost\":\n        handleFinish();\n        break;\n    }\n  }\n\n  async function handleShare() {\n    const summary = generateGuessSummary(\n      $gameState.guesses,\n      $gameState.config.maxGuesses,\n      $gameState.config.dayNumber,\n      $playState === \"won\"\n    );\n    const shareData = { text: summary };\n    if (navigator.canShare && navigator.canShare(shareData)) {\n      await navigator.share(shareData);\n      console.log(\"Shared\");\n    } else if (navigator.clipboard) {\n      await navigator.clipboard.writeText(summary);\n      console.log(\"Copied to clipboard\");\n    } else {\n      console.log(\"Not shareable\");\n    }\n  }\n</script>\n\n<svelte:window on:keydown={handleKeydown} />\n\n<header>\n  <h1>Samdle</h1>\n</header>\n\n<main>\n  <div class=\"game-board-container\">\n    <GameBoard\n      {wordLength}\n      {currentGuess}\n      pastGuesses={$gameState.guesses}\n      maxGuesses={$gameState.config.maxGuesses}\n      gameActive={$playState === \"playing\"}\n      on:reveled={handleGuessRevealed}\n    />\n  </div>\n\n  <div class=\"keyboard-container\">\n    <Keyboard {keyUsageInfo} />\n  </div>\n\n  {#if showModal}\n    <ConffetiAnimation />\n\n    <Modal on:close={() => (showModal = false)}>\n      <h2>\n        {#if $playState === \"won\"}\n          Congratulations!\n        {:else}\n          Better Luck Next Time!\n        {/if}\n      </h2>\n\n      {#if $playState === \"won\"}\n        <small>\n          Today's word is\n          <q class=\"todays-word\">{solution.word}</q>\n        </small>\n\n        <hr />\n\n        {#each solution.message as part}\n          <p>{@html part}</p>\n        {/each}\n      {:else}\n        <small>\n          I still love you, even if you couldn't guess today's word 🙂\n        </small>\n      {/if}\n\n      <hr />\n\n      <p>\n        <small>Check back tomorrow for another word inspired by you.</small>\n      </p>\n\n      <button class=\"share\" on:click={handleShare}>Share</button>\n    </Modal>\n  {/if}\n</main>\n\n<style>\n  header {\n    display: flex;\n    justify-content: center;\n    border-bottom: 1px solid var(--border-color);\n\n    font-family: var(--title-font-family);\n  }\n\n  header h1 {\n    margin: 0.5rem 0;\n  }\n\n  main {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    align-items: stretch;\n\n    padding: 0.5rem;\n  }\n\n  .game-board-container {\n    flex: 1;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .keyboard-container {\n    display: flex;\n    justify-content: center;\n  }\n\n  q.todays-word {\n    font-weight: bold;\n  }\n</style>\n","import { comparePriority } from \"./guess\";\nexport function getKeyUsage(guesses) {\n    let usageInfo = {};\n    for (const guess of guesses) {\n        for (const { letter, correctness } of guess) {\n            // Only update with a correctness of a \"higher priority\"\n            // i.e. override \"inWord\" with \"correct\" but not vice-versa\n            const existingInfo = usageInfo[letter];\n            if (!existingInfo || comparePriority(existingInfo, correctness) > 0) {\n                usageInfo[letter] = correctness;\n            }\n        }\n    }\n    return usageInfo;\n}\n","import App from \"./App.svelte\";\nconst app = new App({\n    target: document.body,\n});\nexport default app;\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","subscribe","store","callbacks","unsub","unsubscribe","component_subscribe","component","callback","$$","on_destroy","push","create_slot","definition","ctx","$$scope","slot_ctx","get_slot_context","tar","src","k","assign","slice","get_slot_changes","dirty","lets","undefined","merged","len","Math","max","length","i","update_slot_base","slot","slot_definition","slot_changes","get_slot_context_fn","slot_context","p","get_all_dirty_from_scope","null_to_empty","value","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","d","element","name","document","createElement","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","removeAttribute","getAttribute","setAttribute","set_data","wholeText","toggle_class","toggle","classList","current_component","set_current_component","createEventDispatcher","Error","get_current_component","type","detail","bubbles","e","createEvent","initCustomEvent","custom_event","call","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","seen_callbacks","Set","flushidx","flush","saved_component","update","pop","has","add","clear","fragment","before_update","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","create_component","mount_component","customElement","on_mount","m","new_on_destroy","map","filter","destroy_component","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","context","Map","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","this","$on","index","indexOf","splice","$set","$$props","obj","$$set","keys","total","windowHight","window","innerHeight","windowWidth","innerWidth","div","each_value","confettiCount","ceil","random","seed","x","sin","floor","position","delay","acceleration","sqrt","correctnessPriority","comparePriority","c1","c2","c1Index","checkGuess","guess","wordLength","result","targetIndex","resultIndex","compareGuessLetters","correctness","letter","dispatch","correctnessClass","correct","inWord","notInWord","animations","getAnimations","$$value","t0_value","t0","lettertile_changes","each_blocks","revealedTiles","create_if_block","each_blocks_1","currentGuess","pastGuesses","maxGuesses","gameActive","remainingGuesses","currentGuessLetters","handleGuessRevealed","baseRemainingGuesses","$$invalidate","currentGuessRemainingLetters","split","concat","correctnessTypeSymbols","t_value","button","dispose","keyboardLayout","keyUsageInfo","specialKeys","Enter","Backspace","isSpecialKey","key","dispatchEvent","KeyboardEvent","div2","div0","div1","handleClose","subscriber_queue","writable","start","stop","subscribers","set","new_value","run_queue","subscriber","invalidate","size","derived","stores","initial_value","single","isArray","stores_array","auto","inited","values","pending","cleanup","sync","unsubscribers","string","config","s","minLength","maxLength","number","n","integer","array","itemValidator","every","object","shape","entries","validator","dayNumber","solutionStartDate","Date","solutions","startDate","getTime","today","dateDelta","UTC","getFullYear","getMonth","getDate","calcDayNumber","solutionIndex","currentSolution","solution","GAME_STATE_KEY","gameConfigValidator","validate.object","validate.number","word","validate.string","message","validate.array","gameStateValidator","guesses","items","includes","gameState","submitGuess","state","makeGameStateStore","oldState","JSON","parse","localStorage","getItem","console","log","retrieveGameState","setItem","stringify","playState","gameStore","$gameStore","some","g","join","derivePlayState","makePlayStateStore","small","t1_value","q","hr","t1","innerHTML","raw_value","create_if_block_2","create_if_block_1","h2","header","main","gameboard_changes","showModal","handleSubmitGuess","wordlist","$gameState","usageInfo","existingInfo","getKeyUsage","$playState","ctrlKey","altKey","metaKey","preventDefault","test","toUpperCase","summary","solved","letters","generateGuessSummary","shareData","navigator","canShare","share","clipboard","writeText","body"],"mappings":"gCAAA,SAASA,KAgBT,SAASC,EAAIC,GACT,OAAOA,IAEX,SAASC,IACL,OAAOC,OAAOC,OAAO,MAEzB,SAASC,EAAQC,GACbA,EAAIC,QAAQP,GAEhB,SAASQ,EAAYC,GACjB,MAAwB,mBAAVA,EAElB,SAASC,EAAeC,EAAGC,GACvB,OAAOD,GAAKA,EAAIC,GAAKA,EAAID,IAAMC,GAAOD,GAAkB,iBAANA,GAAgC,mBAANA,EAqBhF,SAASE,EAAUC,KAAUC,GACzB,GAAa,MAATD,EACA,OAAOf,EAEX,MAAMiB,EAAQF,EAAMD,aAAaE,GACjC,OAAOC,EAAMC,YAAc,IAAMD,EAAMC,cAAgBD,EAO3D,SAASE,EAAoBC,EAAWL,EAAOM,GAC3CD,EAAUE,GAAGC,WAAWC,KAAKV,EAAUC,EAAOM,IAElD,SAASI,EAAYC,EAAYC,EAAKC,EAAS1B,GAC3C,GAAIwB,EAAY,CACZ,MAAMG,EAAWC,EAAiBJ,EAAYC,EAAKC,EAAS1B,GAC5D,OAAOwB,EAAW,GAAGG,IAG7B,SAASC,EAAiBJ,EAAYC,EAAKC,EAAS1B,GAChD,OAAOwB,EAAW,IAAMxB,EAtE5B,SAAgB6B,EAAKC,GAEjB,IAAK,MAAMC,KAAKD,EACZD,EAAIE,GAAKD,EAAIC,GACjB,OAAOF,EAmEDG,CAAON,EAAQD,IAAIQ,QAAST,EAAW,GAAGxB,EAAGyB,KAC7CC,EAAQD,IAElB,SAASS,EAAiBV,EAAYE,EAASS,EAAOnC,GAClD,GAAIwB,EAAW,IAAMxB,EAAI,CACrB,MAAMoC,EAAOZ,EAAW,GAAGxB,EAAGmC,IAC9B,QAAsBE,IAAlBX,EAAQS,MACR,OAAOC,EAEX,GAAoB,iBAATA,EAAmB,CAC1B,MAAME,EAAS,GACTC,EAAMC,KAAKC,IAAIf,EAAQS,MAAMO,OAAQN,EAAKM,QAChD,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAKI,GAAK,EAC1BL,EAAOK,GAAKjB,EAAQS,MAAMQ,GAAKP,EAAKO,GAExC,OAAOL,EAEX,OAAOZ,EAAQS,MAAQC,EAE3B,OAAOV,EAAQS,MAEnB,SAASS,EAAiBC,EAAMC,EAAiBrB,EAAKC,EAASqB,EAAcC,GACzE,GAAID,EAAc,CACd,MAAME,EAAerB,EAAiBkB,EAAiBrB,EAAKC,EAASsB,GACrEH,EAAKK,EAAED,EAAcF,IAO7B,SAASI,EAAyBzB,GAC9B,GAAIA,EAAQD,IAAIiB,OAAS,GAAI,CACzB,MAAMP,EAAQ,GACRO,EAAShB,EAAQD,IAAIiB,OAAS,GACpC,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAQC,IACxBR,EAAMQ,IAAM,EAEhB,OAAOR,EAEX,OAAQ,EAiCZ,SAASiB,EAAcC,GACnB,OAAgB,MAATA,EAAgB,GAAKA,EAgKhC,SAASC,EAAOC,EAAQC,GACpBD,EAAOE,YAAYD,GAoDvB,SAASE,EAAOH,EAAQC,EAAMG,GAC1BJ,EAAOK,aAAaJ,EAAMG,GAAU,MAUxC,SAASE,EAAOL,GACZA,EAAKM,WAAWC,YAAYP,GAEhC,SAASQ,EAAaC,EAAYC,GAC9B,IAAK,IAAIvB,EAAI,EAAGA,EAAIsB,EAAWvB,OAAQC,GAAK,EACpCsB,EAAWtB,IACXsB,EAAWtB,GAAGwB,EAAED,GAG5B,SAASE,EAAQC,GACb,OAAOC,SAASC,cAAcF,GAoBlC,SAASG,EAAKC,GACV,OAAOH,SAASI,eAAeD,GAEnC,SAASE,IACL,OAAOH,EAAK,KAEhB,SAASI,IACL,OAAOJ,EAAK,IAEhB,SAASK,EAAOrB,EAAMsB,EAAOC,EAASC,GAElC,OADAxB,EAAKyB,iBAAiBH,EAAOC,EAASC,GAC/B,IAAMxB,EAAK0B,oBAAoBJ,EAAOC,EAASC,GA8B1D,SAASG,EAAK3B,EAAM4B,EAAW/B,GACd,MAATA,EACAG,EAAK6B,gBAAgBD,GAChB5B,EAAK8B,aAAaF,KAAe/B,GACtCG,EAAK+B,aAAaH,EAAW/B,GAqLrC,SAASmC,EAAShB,EAAMC,GACpBA,EAAO,GAAKA,EACRD,EAAKiB,YAAchB,IACnBD,EAAKC,KAAOA,GAiGpB,SAASiB,EAAatB,EAASC,EAAMsB,GACjCvB,EAAQwB,UAAUD,EAAS,MAAQ,UAAUtB,GAqNjD,IAAIwB,EACJ,SAASC,EAAsB5E,GAC3B2E,EAAoB3E,EAmBxB,SAAS6E,IACL,MAAM7E,EAlBV,WACI,IAAK2E,EACD,MAAM,IAAIG,MAAM,oDACpB,OAAOH,EAeWI,GAClB,MAAO,CAACC,EAAMC,KACV,MAAMrF,EAAYI,EAAUE,GAAGN,UAAUoF,GACzC,GAAIpF,EAAW,CAGX,MAAMgE,EA/OlB,SAAsBoB,EAAMC,EAAQC,GAAU,GAC1C,MAAMC,EAAI/B,SAASgC,YAAY,eAE/B,OADAD,EAAEE,gBAAgBL,EAAME,GAAS,EAAOD,GACjCE,EA4OeG,CAAaN,EAAMC,GACjCrF,EAAUmB,QAAQ3B,SAAQN,IACtBA,EAAGyG,KAAKvF,EAAW4D,QA4BnC,MAAM4B,EAAmB,GAEnBC,EAAoB,GACpBC,EAAmB,GACnBC,EAAkB,GAClBC,EAAmBC,QAAQC,UACjC,IAAIC,GAAmB,EAWvB,SAASC,EAAoBlH,GACzB4G,EAAiBtF,KAAKtB,GAuB1B,MAAMmH,EAAiB,IAAIC,IAC3B,IAAIC,EAAW,EACf,SAASC,IACL,MAAMC,EAAkB1B,EACxB,EAAG,CAGC,KAAOwB,EAAWX,EAAiBhE,QAAQ,CACvC,MAAMxB,EAAYwF,EAAiBW,GACnCA,IACAvB,EAAsB5E,GACtBsG,EAAOtG,EAAUE,IAKrB,IAHA0E,EAAsB,MACtBY,EAAiBhE,OAAS,EAC1B2E,EAAW,EACJV,EAAkBjE,QACrBiE,EAAkBc,KAAlBd,GAIJ,IAAK,IAAIhE,EAAI,EAAGA,EAAIiE,EAAiBlE,OAAQC,GAAK,EAAG,CACjD,MAAMxB,EAAWyF,EAAiBjE,GAC7BwE,EAAeO,IAAIvG,KAEpBgG,EAAeQ,IAAIxG,GACnBA,KAGRyF,EAAiBlE,OAAS,QACrBgE,EAAiBhE,QAC1B,KAAOmE,EAAgBnE,QACnBmE,EAAgBY,KAAhBZ,GAEJI,GAAmB,EACnBE,EAAeS,QACf9B,EAAsByB,GAE1B,SAASC,EAAOpG,GACZ,GAAoB,OAAhBA,EAAGyG,SAAmB,CACtBzG,EAAGoG,SACHpH,EAAQgB,EAAG0G,eACX,MAAM3F,EAAQf,EAAGe,MACjBf,EAAGe,MAAQ,EAAE,GACbf,EAAGyG,UAAYzG,EAAGyG,SAAS3E,EAAE9B,EAAGK,IAAKU,GACrCf,EAAG2G,aAAazH,QAAQ4G,IAiBhC,MAAMc,EAAW,IAAIZ,IACrB,IAAIa,EACJ,SAASC,IACLD,EAAS,CACLE,EAAG,EACHC,EAAG,GACHlF,EAAG+E,GAGX,SAASI,IACAJ,EAAOE,GACR/H,EAAQ6H,EAAOG,GAEnBH,EAASA,EAAO/E,EAEpB,SAASoF,EAAcC,EAAOC,GACtBD,GAASA,EAAM5F,IACfqF,EAASS,OAAOF,GAChBA,EAAM5F,EAAE6F,IAGhB,SAASE,EAAeH,EAAOC,EAAO3E,EAAQ1C,GAC1C,GAAIoH,GAASA,EAAMI,EAAG,CAClB,GAAIX,EAASN,IAAIa,GACb,OACJP,EAASL,IAAIY,GACbN,EAAOG,EAAE9G,MAAK,KACV0G,EAASS,OAAOF,GACZpH,IACI0C,GACA0E,EAAMpE,EAAE,GACZhD,QAGRoH,EAAMI,EAAEH,IA6oBhB,SAASI,EAAiBL,GACtBA,GAASA,EAAMH,IAKnB,SAASS,EAAgB3H,EAAWqC,EAAQI,EAAQmF,GAChD,MAAMjB,SAAEA,EAAQkB,SAAEA,EAAQ1H,WAAEA,EAAU0G,aAAEA,GAAiB7G,EAAUE,GACnEyG,GAAYA,EAASmB,EAAEzF,EAAQI,GAC1BmF,GAED5B,GAAoB,KAChB,MAAM+B,EAAiBF,EAASG,IAAInJ,GAAKoJ,OAAO5I,GAC5Cc,EACAA,EAAWC,QAAQ2H,GAKnB7I,EAAQ6I,GAEZ/H,EAAUE,GAAG2H,SAAW,MAGhChB,EAAazH,QAAQ4G,GAEzB,SAASkC,EAAkBlI,EAAWgD,GAClC,MAAM9C,EAAKF,EAAUE,GACD,OAAhBA,EAAGyG,WACHzH,EAAQgB,EAAGC,YACXD,EAAGyG,UAAYzG,EAAGyG,SAAS1D,EAAED,GAG7B9C,EAAGC,WAAaD,EAAGyG,SAAW,KAC9BzG,EAAGK,IAAM,IAGjB,SAAS4H,EAAWnI,EAAWyB,IACI,IAA3BzB,EAAUE,GAAGe,MAAM,KACnBuE,EAAiBpF,KAAKJ,GArzBrB+F,IACDA,GAAmB,EACnBH,EAAiBwC,KAAKhC,IAqzBtBpG,EAAUE,GAAGe,MAAMoH,KAAK,IAE5BrI,EAAUE,GAAGe,MAAOQ,EAAI,GAAM,IAAO,GAAMA,EAAI,GAEnD,SAAS6G,EAAKtI,EAAW8D,EAASyE,EAAUC,EAAiBC,EAAWC,EAAOC,EAAe1H,EAAQ,EAAE,IACpG,MAAM2H,EAAmBjE,EACzBC,EAAsB5E,GACtB,MAAME,EAAKF,EAAUE,GAAK,CACtByG,SAAU,KACVpG,IAAK,KAELmI,MAAAA,EACApC,OAAQ1H,EACR6J,UAAAA,EACAI,MAAO9J,IAEP8I,SAAU,GACV1H,WAAY,GACZ2I,cAAe,GACflC,cAAe,GACfC,aAAc,GACdkC,QAAS,IAAIC,IAAIlF,EAAQiF,UAAYH,EAAmBA,EAAiB1I,GAAG6I,QAAU,KAEtFnJ,UAAWb,IACXkC,MAAAA,EACAgI,YAAY,EACZC,KAAMpF,EAAQzB,QAAUuG,EAAiB1I,GAAGgJ,MAEhDP,GAAiBA,EAAczI,EAAGgJ,MAClC,IAAIC,GAAQ,EAkBZ,GAjBAjJ,EAAGK,IAAMgI,EACHA,EAASvI,EAAW8D,EAAQ4E,OAAS,IAAI,CAACjH,EAAG2H,KAAQC,KACnD,MAAMlH,EAAQkH,EAAK7H,OAAS6H,EAAK,GAAKD,EAOtC,OANIlJ,EAAGK,KAAOkI,EAAUvI,EAAGK,IAAIkB,GAAIvB,EAAGK,IAAIkB,GAAKU,MACtCjC,EAAG+I,YAAc/I,EAAG2I,MAAMpH,IAC3BvB,EAAG2I,MAAMpH,GAAGU,GACZgH,GACAhB,EAAWnI,EAAWyB,IAEvB2H,KAET,GACNlJ,EAAGoG,SACH6C,GAAQ,EACRjK,EAAQgB,EAAG0G,eAEX1G,EAAGyG,WAAW6B,GAAkBA,EAAgBtI,EAAGK,KAC/CuD,EAAQzB,OAAQ,CAChB,GAAIyB,EAAQwF,QAAS,CAEjB,MAAMC,EA91ClB,SAAkBrG,GACd,OAAOsG,MAAMC,KAAKvG,EAAQwG,YA61CJC,CAAS7F,EAAQzB,QAE/BnC,EAAGyG,UAAYzG,EAAGyG,SAASiD,EAAEL,GAC7BA,EAAMnK,QAAQuD,QAIdzC,EAAGyG,UAAYzG,EAAGyG,SAASO,IAE3BpD,EAAQ+F,OACRzC,EAAcpH,EAAUE,GAAGyG,UAC/BgB,EAAgB3H,EAAW8D,EAAQzB,OAAQyB,EAAQrB,OAAQqB,EAAQ8D,eAEnExB,IAEJxB,EAAsBgE,GAkD1B,MAAMkB,EACFC,WACI7B,EAAkB8B,KAAM,GACxBA,KAAKD,SAAWnL,EAEpBqL,IAAIjF,EAAM/E,GACN,MAAML,EAAaoK,KAAK9J,GAAGN,UAAUoF,KAAUgF,KAAK9J,GAAGN,UAAUoF,GAAQ,IAEzE,OADApF,EAAUQ,KAAKH,GACR,KACH,MAAMiK,EAAQtK,EAAUuK,QAAQlK,IACjB,IAAXiK,GACAtK,EAAUwK,OAAOF,EAAO,IAGpCG,KAAKC,GA73DT,IAAkBC,EA83DNP,KAAKQ,QA93DCD,EA83DkBD,EA73DG,IAA5BtL,OAAOyL,KAAKF,GAAK/I,UA83DhBwI,KAAK9J,GAAG+I,YAAa,EACrBe,KAAKQ,MAAMF,GACXN,KAAK9J,GAAG+I,YAAa,kKCr2DpB1I,EAAsB,GAAA,CAC3B2J,MAAA3J,EAAK,GACLmK,MAAOnK,EAAa,GACpBoK,YAAaC,OAAOC,YACpBC,YAAaF,OAAOG,sBANxBvI,EAQCH,EAAA2I,EAAAvI,4CATQwI,EAAA,IAAAzB,MAAMjJ,EAAe,IAAA8H,KAAK,2BAAnC7G,OAAIC,GAAA,sIADRe,EAYKH,EAAA2I,EAAAvI,0EAXQwI,EAAA,IAAAzB,MAAMjJ,EAAe,IAAA8H,KAAK,cAAnC7G,OAAIC,GAAA,EAAA,iHAAJD,sDA7DI,MAoBA0J,EAAgB5J,KAAK6J,KAHH,IAGQP,OAAOG,qBAa9B,UACPb,MAAAA,EAAKQ,MACLA,EAAKC,YACLA,IAEM,MAAAS,GArCLC,EAqC6BX,EAAQR,EArCzB,KAEL,MAAAoB,EAAuB,IAAnBhK,KAAKiK,MAAMF,GACd,OAAAC,EAAIhK,KAAKkK,MAAMF,KAHvBD,IAAAA,EAuCK,MAAAI,GACHvB,EAAQ,GAbY,IAaL,EAAIkB,IAAW,IAAyBV,EACpDgB,EApBgB,EAoBUN,IAE1BO,EAlBiB,KAmBD,EAhBK,GAgBsBP,2CAOb,IAAXK,gCACHC,mCAPLpK,KAAKsK,KAAM,EAAIjB,EAAegB,iCAG7C,EAAgB,IAAZP,kFCvDV,MAAMS,GAAsB,CAAC,YAAa,SAAU,WAC7C,SAASC,GAAgBC,EAAIC,GAChC,IAAIC,EAAUJ,GAAoB1B,QAAQ4B,GAE1C,OADcF,GAAoB1B,QAAQ6B,GACzBC,EAgCd,SAASC,GAAWC,EAAO9J,GAC9B,OA/BG,SAA6B8J,EAAO9J,GACvC,GAAI8J,EAAM3K,SAAWa,EAAOb,OACxB,MAAM,IAAIsD,MAAM,0CAEpB,MAAMsH,EAAaD,EAAM3K,OAEzB,IAAI6K,EAAS,IAAI7C,MAAM4C,GAAY/D,KAAK,aAExC,IAAK,IAAI5G,EAAI,EAAGA,EAAI2K,EAAY3K,IACxB0K,EAAM1K,KAAOY,EAAOZ,KACpB4K,EAAO5K,GAAK,WAKpB,IAAK,IAAI6K,EAAc,EAAGA,EAAcF,EAAYE,IAChD,GAA4B,YAAxBD,EAAOC,GAGP,IAAK,IAAIC,EAAc,EAAGA,EAAcF,EAAO7K,OAAQ+K,IACnD,GAA4B,cAAxBF,EAAOE,IACPJ,EAAMI,KAAiBlK,EAAOiK,GAAc,CAC5CD,EAAOE,GAAe,SACtB,MAKhB,OAAOF,EAGAG,CAAoBL,EAAO9J,GAAQ2F,KAAI,CAACyE,EAAavC,KAAW,CACnEuC,YAAAA,EACAC,OAAQP,EAAMjC,oICLE3J,EAAgB,MAAA,yDACPA,EAAK,cAHtCiC,EAMKH,EAAA2I,EAAAvI,oJAH4BlC,EAAK,uJA/BzBkM,YAAAA,GAAgDnC,GAChDJ,MAAAA,EAAgB,GAACI,EAEtB,MAAAqC,EAAW9H,IAQX+H,EAAmBH,EAND,CACtBI,QAAS,UACTC,OAAQ,UACRC,UAAW,eAG6CN,GAAe,OAErEvJ,4JAEEA,EAAO,OACH8J,EAAa9J,EAAQ+J,mBACvBD,EAAWxL,OAAS,EAAC,CAEAwL,EAAW,GACnBjJ,iBAAiB,UAAgB,IAAA4I,EAAS,sEASpDzJ,EAAOgK,iPCjCpB1K,EAEKH,EAAA2I,EAAAvI,8ZC2BE,QAAA0K,EAAA5M,KAAEmM,OAAM,6DAAR,EAAAzL,GAAAkM,KAAAA,EAAA5M,KAAEmM,OAAM,KAAApI,EAAA8I,EAAAD,0EAJIV,YAAAlM,KAAEkM,kFAEFlM,EAAkB,mEAFlB,EAAAU,IAAAoM,EAAAZ,YAAAlM,KAAEkM,mKAFZlM,EAAK,wBAAViB,OAAIC,GAAA,8MAAClB,EAAK,WAAViB,OAAIC,GAAA,EAAA,mHAAJD,OAAIC,EAAA6L,EAAA9L,OAAAC,GAAA,yCAAJD,OAAIC,GAAA,8ZAjBK0K,GAAmB7B,EAExB,MAAAqC,EAAW9H,IAEb,IAAA0I,EAAgB,kEAKZA,IAAkBpB,EAAM3K,SAC5B+L,EAAgB,EAChBZ,EAAS,4UCTF1B,EAAA,IAAAzB,MAAMjJ,EAAY,IAAA8H,KAAK,2BAAhC7G,OAAIC,GAAA,6NAAKwJ,EAAA,IAAAzB,MAAMjJ,EAAY,IAAA8H,KAAK,cAAhC7G,OAAIC,GAAA,6FAAJD,OAAIC,EAAA6L,EAAA9L,OAAAC,GAAA,yCAAJD,OAAIC,GAAA,kaAJK2K,GAAkB9B,m5BCkDpB/J,EAAM,IAAA,0EAANA,EAAM,IAAA,KAAA+D,EAAA8I,EAAAD,wVAFJ5M,EAAmB,wBAAxBiB,OAAIC,GAAA,+MAAClB,EAAmB,WAAxBiB,OAAIC,GAAA,EAAA,mHAAJD,OAAIC,EAAA6L,EAAA9L,OAAAC,GAAA,yCAAJD,OAAIC,GAAA,2XAPHlB,EAAW,wBAAhBiB,OAAIC,GAAA,oEAKDlB,EAAU,IAAAiN,GAAAjN,GAUJ0K,EAAA,IAAAzB,MAAMjJ,EAAkB,IAAA8H,KAAK,2BAAtC7G,OAAIC,GAAA,oOAhBRe,EAmBKH,EAAA2I,EAAAvI,0JAlBIlC,EAAW,WAAhBiB,OAAIC,GAAA,EAAA,wGAAJD,OAAIC,EAAAgM,EAAAjM,OAAAC,GAAA,cAKDlB,EAAU,gHAUJ0K,EAAA,IAAAzB,MAAMjJ,EAAkB,IAAA8H,KAAK,cAAtC7G,OAAIC,GAAA,EAAA,2GAAJD,OAAIC,EAAA6L,EAAA9L,OAAAC,GAAA,yCAfJD,OAAIC,GAAA,+BAeJD,OAAIC,GAAA,yNAnDK2K,GAAkB9B,GAClBoD,aAAAA,EAAuB,IAAEpD,eACzBqD,EAAW,IAAArD,cACXsD,GAAkBtD,cAClBuD,GAAmBvD,EAExB,MAAAqC,EAAW9H,QAEbiJ,EASAC,EAWK,SAAAC,EAAoB7B,GACvBA,IAAUwB,EAAYA,EAAYnM,OAAS,IAC7CmL,EAAS,UAAWR,8PArBvB,CACO,MAAA8B,EAAuBL,EAAaD,EAAYnM,OAGtD0M,EAAA,EAAAJ,EAAmBxM,KAAKC,IAAI0M,GAAwBJ,EAAa,EAAI,GAAI,qBAK1E,CACO,MAAAM,EAA+B/B,EAAasB,EAAalM,OAC/D0M,EAAA,EAAAH,EAAsBL,EACnBU,MAAM,IACNC,OAAM,IAAK7E,MAAM2E,GAA8B9F,KAAK,yBAeX8D,GAAA6B,EAAoB7B,uICxCpE,MACMmC,GAAyB,CAC3BzB,QAAS,KACTC,OAAQ,KACRC,UAAW,uSCgCFwB,EAAAhO,KAAWA,EAAG,IAAA,0DAJDA,EAAkB,GAACA,EAAY,GAACA,EAAG,QAAA,iBAClCiE,EAAAgK,EAAA,UAAAjO,KAAaA,EAAG,aAFjCiC,EAMQH,EAAAmM,EAAA/L,cAHIgM,EAAA9K,EAAA6K,EAAA,QAAAjO,KAAgBA,EAAG,4CAFfA,EAAkB,GAACA,EAAY,GAACA,EAAG,QAAA,sCAClCiE,EAAAgK,EAAA,UAAAjO,KAAaA,EAAG,oHAJjCiC,EAAqBH,EAAA2I,EAAAvI,gEADlB,OAAQ,OAARlC,KAAYiN,mIADZjN,EAAG,wBAARiB,OAAIC,GAAA,uIADRe,EAcKH,EAAA2I,EAAAvI,kFAbIlC,EAAG,WAARiB,OAAIC,GAAA,EAAA,gHAAJD,sDAFCkN,wBAALlN,OAAIC,GAAA,6HADRe,EAkBKH,EAAA2I,EAAAvI,6EAjBIiM,WAALlN,OAAIC,GAAA,EAAA,mHAAJD,2EAxBSmN,EAAY,IAAArE,QAQjBsE,GACJC,MAAO,QACPC,UAAW,OAGPC,EAAgBC,GAAyBA,KAAOJ,mEAX9B,CACtB/B,QAAS,UACTC,OAAQ,UACRC,UAAW,iBAUOiC,GAClBD,EAAaC,GAAOJ,EAAYI,GAAOA,EAEhBA,GAAW,KAClCpE,OAAOqE,cAAa,IAAKC,cAAc,WAAaF,IAAAA,keCRxDxM,EAMKH,EAAA8M,EAAA1M,GALHL,EAAoD+M,EAAAC,UACpDhN,EAGK+M,EAAAE,GAFHjN,EAAoEiN,EAAAb,wDAL7CjO,EAAa,gBAGAA,EAAW,gBAERA,EAAW,oNAlB9C,MAAAoM,EAAW9H,aAERyK,IACP3C,EAAS,gEAGF,SAAc/I,GACH,WAAdA,EAAMoL,KACRM,0ECRN,MAAMC,GAAmB,GAgBzB,SAASC,GAASrN,EAAOsN,EAAQ7Q,GAC7B,IAAI8Q,EACJ,MAAMC,EAAc,IAAIzJ,IACxB,SAAS0J,EAAIC,GACT,GAAItQ,EAAe4C,EAAO0N,KACtB1N,EAAQ0N,EACJH,GAAM,CACN,MAAMI,GAAaP,GAAiB/N,OACpC,IAAK,MAAMuO,KAAcJ,EACrBI,EAAW,KACXR,GAAiBnP,KAAK2P,EAAY5N,GAEtC,GAAI2N,EAAW,CACX,IAAK,IAAIrO,EAAI,EAAGA,EAAI8N,GAAiB/N,OAAQC,GAAK,EAC9C8N,GAAiB9N,GAAG,GAAG8N,GAAiB9N,EAAI,IAEhD8N,GAAiB/N,OAAS,IAuB1C,MAAO,CAAEoO,IAAAA,EAAKtJ,OAlBd,SAAgBxH,GACZ8Q,EAAI9Q,EAAGqD,KAiBWzC,UAftB,SAAmBb,EAAKmR,EAAapR,GACjC,MAAMmR,EAAa,CAAClR,EAAKmR,GAMzB,OALAL,EAAYlJ,IAAIsJ,GACS,IAArBJ,EAAYM,OACZP,EAAOD,EAAMG,IAAQhR,GAEzBC,EAAIsD,GACG,KACHwN,EAAYpI,OAAOwI,GACM,IAArBJ,EAAYM,OACZP,IACAA,EAAO,SAMvB,SAASQ,GAAQC,EAAQrR,EAAIsR,GACzB,MAAMC,GAAU7G,MAAM8G,QAAQH,GACxBI,EAAeF,EACf,CAACF,GACDA,EACAK,EAAO1R,EAAG0C,OAAS,EACzB,OAzDqBiO,EAyDWG,IAC5B,IAAIa,GAAS,EACb,MAAMC,EAAS,GACf,IAAIC,EAAU,EACVC,EAAUhS,EACd,MAAMiS,EAAO,KACT,GAAIF,EACA,OAEJC,IACA,MAAMvE,EAASvN,EAAGuR,EAASK,EAAO,GAAKA,EAAQd,GAC3CY,EACAZ,EAAIvD,GAGJuE,EAAUvR,EAAYgN,GAAUA,EAASzN,GAG3CkS,EAAgBP,EAAavI,KAAI,CAACrI,EAAO8B,IAAM/B,EAAUC,GAAQwC,IACnEuO,EAAOjP,GAAKU,EACZwO,KAAa,GAAKlP,GACdgP,GACAI,OAEL,KACCF,GAAY,GAAKlP,OAIrB,OAFAgP,GAAS,EACTI,IACO,WACH3R,EAAQ4R,GACRF,MAvFD,CACHlR,UAAW8P,GAuDCY,EAvDeX,GAAO/P,WAF1C,IAAyB+P,u+UCLlB,SAASsB,GAAOC,EAAS,IAC5B,OAAQC,GAAmB,iBAANA,SACK9P,IAArB6P,EAAOE,WAA2BD,EAAEzP,QAAUwP,EAAOE,kBAChC/P,IAArB6P,EAAOG,WAA2BF,EAAEzP,QAAUwP,EAAOG,WAEvD,SAASC,GAAOJ,EAAS,IAC5B,OAAQK,GAAmB,iBAANA,KAAoBL,EAAOM,SAAWD,IAAM/P,KAAKkK,MAAM6F,IAEzE,SAASE,GAAMC,GAClB,OAAQhS,GAAMgK,MAAM8G,QAAQ9Q,IAAMA,EAAEiS,MAAMD,GAEvC,SAASE,GAAOC,GACnB,OAAQlK,GAAMzI,OAAO4S,QAAQD,GAAOF,OAAM,EAAEzC,EAAK6C,KAAeA,EAAUpK,EAAEuH,MCAhF,MAAM8C,GAZN,WACI,MAAMC,EAAoB,IAAIC,KAAKC,GAAUC,WAAWC,UAClDC,EAAQ,IAAIJ,KAGZK,EADWL,KAAKM,IAAIF,EAAMG,cAAeH,EAAMI,WAAYJ,EAAMK,WAC1CV,EAE7B,OAAOzQ,KAAKkK,MAAM6G,EARH,OAaDK,GACZC,GAAgBb,GAAYG,GAAUA,UAAUzQ,OAChDoR,GAAkBX,GAAUA,UAAUU,IAC/B3B,GAAS,CAClBpD,WAAY,EACZkE,UAAWA,GACXe,SAAUD,IAERE,GAAiB,oBAEjBC,GAAsBC,GAAgB,CACxCpF,WAAYqF,GAAgB,CAAE3B,SAAS,IACvCQ,UAAWmB,GAAgB,CAAE3B,SAAS,IACtCuB,SAAUG,GAAgB,CACtBE,KAAMC,KACNC,QAASC,GAAeF,UAG1BG,GAAqBN,GAAgB,CACvChC,OAAQ+B,GACRQ,QAASF,GAAeA,GAAeL,GAAgB,CACnDvG,aDnBc+G,GCmBc,CAAC,UAAW,SAAU,aDlB9CrO,GAAMqO,GAAMC,SAAStO,ICmBzBuH,OAAQyG,GAAgB,CAAEjC,UAAW,EAAGC,UAAW,UDpBpD,IAAeqC,GCwCf,MAAME,GC5CN,SAA4B1C,EAAQvB,GACvC,MAAM/P,UAAEA,EAAS4G,OAAEA,GAAWkJ,GAAS,CACnCwB,OAAAA,EACAuC,QAAS,IACV9D,GACH,MAAO,CACH/P,UAAAA,EACAiU,YAAYxH,GACR7F,GAAQsN,GAAW5U,OAAO8B,OAAO9B,OAAO8B,OAAO,GAAI8S,GAAQ,CAAEL,QAAS,IAAIK,EAAML,QAASrH,GAAWC,EAAO6E,EAAO6B,SAASK,aDoC9GW,CAAmB7C,IAASpB,IACjD,MAAMkE,EAlBV,WACI,IACI,MAAMF,EAAQG,KAAKC,MAAMC,aAAaC,QAAQpB,KAC9C,GAAIQ,GAAmBM,GACnB,OAAOA,EAGPO,QAAQC,IAAI,kCAAmCR,GAGvD,MAAOzO,GACH,QAOakP,GACbP,GAAYA,EAAS9C,OAAOc,YAAcA,IAE1ClC,EAAIkE,MAIZJ,GAAUhU,WAXV,SAAwBkU,GACpBK,aAAaK,QAAQxB,GAAgBiB,KAAKQ,UAAUX,OAWjD,MAAMY,GCzCN,SAA4BxD,EAAQyD,GACvC,OAAOvE,GAAQuE,GAAYC,GAxB/B,SAAyB1D,EAAQ4C,GAC7B,OAAIA,EAAML,QAAQoB,MAAMC,GAAyBA,EAFT5M,KAAK4B,GAAMA,EAAE8C,SAAQmI,KAAK,MAEV7D,EAAO6B,SAASK,OAC7D,MAEFU,EAAML,QAAQ/R,QAAUwP,EAAOpD,WAC7B,OAGA,UAgB+BkH,CAAgB9D,EAAQ0D,KDwC7CK,CAAmB/D,GAAQ0C,82rGE6EtC,+FAFmB,uLAmBzBlR,EAEOH,EAAA2S,EAAAvS,0DAXmBwS,EAAA1U,KAAS2S,KAAI,GAKhCjI,EAAA1K,KAAS6S,6BAAd5R,OAAIC,GAAA,iDAPA,kKAANe,EAGOH,EAAA2S,EAAAvS,UADLL,EAAyC4S,EAAAE,mBAG3C1S,EAAKH,EAAA8S,EAAA1S,wEAHqB,GAAAxB,GAAAgU,KAAAA,EAAA1U,KAAS2S,KAAI,KAAA5O,EAAA8Q,EAAAH,mBAKhChK,EAAA1K,KAAS6S,gBAAd5R,OAAIC,GAAA,EAAA,2HAAJD,sFACUjB,EAAI,IAAA,+BAAdiC,EAAkBH,EAAAL,EAAAS,sCAARlC,EAAI,IAAA,MAAAyB,EAAAqT,UAAAC,0EAhBX,MAAe,QAAf/U,KAAoBgV,wCAOtB,MAAe,QAAfhV,KAAoBiV,wPARzBhT,EAMIH,EAAAoT,EAAAhT,0CAmBJD,EAAKH,EAAA8S,EAAA1S,YAELD,EAEGH,EAAAL,EAAAS,YAEHD,EAA0DH,EAAAmM,EAAA/L,qBAA1BlC,EAAW,2UA9C9BoN,YAAApN,KAAWgT,mBACZhT,EAAU,GAACyQ,OAAOpD,WAClBC,WAAe,YAAftN,wBACAA,EAAmB,gDAQ9BA,EAAS,IAAAiN,GAAAjN,wVApBhBiC,EAEQH,EAAAqT,EAAAjT,YAERD,EAsDMH,EAAAsT,EAAAlT,GArDJL,EASKuT,EAAAvG,sBAELhN,EAEKuT,EAAAtG,mEApBoB9O,EAAa,mFAWrB,EAAAU,IAAA2U,EAAAjI,YAAApN,KAAWgT,4BACZhT,EAAU,GAACyQ,OAAOpD,YAClB,GAAA3M,IAAA2U,EAAA/H,WAAe,YAAftN,iEASXA,EAAS,8VA5HV,IAAAmN,EAAe,GAIfmI,GAAY,WAoBPC,KAbHpI,EAAalM,SAAW4K,GAC1B+H,QAAQC,IAAI,sBACL,GAGJ2B,GAAStC,SAAS/F,KACrByG,QAAQC,IAAI,mBACL,MAWTV,GAAUC,YAAYjG,GACtBQ,EAAA,EAAAR,EAAe,2CAjChBQ,EAAA,EAAE9B,EAAa4J,EAAWhF,OAAO6B,SAASK,KAAK1R,0BAC7CqR,EAAWmD,EAAWhF,OAAO6B,4BAI7BlE,ECdE,SAAqB4E,GACxB,IAAI0C,EAAY,GAChB,IAAK,MAAM9J,KAASoH,EAChB,IAAK,MAAM7G,OAAEA,EAAMD,YAAEA,KAAiBN,EAAO,CAGzC,MAAM+J,EAAeD,EAAUvJ,KAC1BwJ,GAAgBpK,GAAgBoK,EAAczJ,GAAe,KAC9DwJ,EAAUvJ,GAAUD,GAIhC,OAAOwJ,EDESE,CAAYH,EAAWzC,0BAkChC,SAAc3P,GACjB,GAAe,YAAfwS,KAIAxS,EAAMyS,SAAWzS,EAAM0S,QAAU1S,EAAM2S,SAInC,OAAA3S,EAAMoL,SACP,QAEHpL,EAAM4S,iBAENV,cAEG,gBACHpI,EAAeA,EAAa3M,MAAM,EAAG2M,EAAalM,OAAS,cAExD,SACH0M,EAAA,EAAAR,EAAe,kBAIX,WAAW+I,KAAK7S,EAAMoL,OACpBtB,EAAalM,OAAS4K,EACxB8B,EAAA,EAAAR,GAAgB9J,EAAMoL,IAAI0H,eAE1BvC,QAAQC,IAAI,wCAUZgC,OACD,UACA,OArEPlI,EAAA,EAAA2H,GAAY,4BA4ENc,EPpFK,SAA8BpD,EAAS3F,EAAYkE,EAAW8E,GAQzE,MAAO,YAAgB9E,EAAY,KAPlB8E,EAASrD,EAAQ/R,OAAS,OAAOoM,MAC7B2F,EAChBvL,KAAK6O,GAAYA,EACjB7O,KAAI,EAAGyE,YAAAA,KAAkB6B,GAAuB7B,KAChDoI,KAAK,MACLA,KAAK,MO8EMiC,CACdd,EAAWzC,QACXyC,EAAWhF,OAAOpD,WAClBoI,EAAWhF,OAAOc,UACH,QAAfsE,GAEIW,EAAS,CAAKzT,KAAMqT,GACtBK,UAAUC,UAAYD,UAAUC,SAASF,UACrCC,UAAUE,MAAMH,GACtB5C,QAAQC,IAAI,WACH4C,UAAUG,iBACbH,UAAUG,UAAUC,UAAUT,GACpCxC,QAAQC,IAAI,wBAEZD,QAAQC,IAAI,kBA8BU,IAAAlG,EAAA,EAAA2H,GAAY,WE3I5B,kEAAQ,CAChBxT,OAAQe,SAASiU"}